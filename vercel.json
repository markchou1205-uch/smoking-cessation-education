// vercel.json - Vercel 部署配置
{
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "devCommand": "npm run dev",
  "installCommand": "npm install",
  "functions": {
    "pages/api/**/*.ts": {
      "runtime": "nodejs18.x"
    }
  },
  "regions": ["hkg1"],
  "env": {
    "POSTGRES_URL": "@postgres_url",
    "POSTGRES_PRISMA_URL": "@postgres_prisma_url",
    "POSTGRES_URL_NON_POOLING": "@postgres_url_non_pooling",
    "POSTGRES_USER": "@postgres_user",
    "POSTGRES_HOST": "@postgres_host",
    "POSTGRES_PASSWORD": "@postgres_password",
    "POSTGRES_DATABASE": "@postgres_database"
  }
}

// .env.local - 環境變數範例
/*
# Database
POSTGRES_URL="postgres://username:password@hostname:port/database?sslmode=require"
POSTGRES_PRISMA_URL="postgres://username:password@hostname:port/database?sslmode=require&pgbouncer=true&connect_timeout=15"
POSTGRES_URL_NON_POOLING="postgres://username:password@hostname:port/database?sslmode=require"
POSTGRES_USER="username"
POSTGRES_HOST="hostname"
POSTGRES_PASSWORD="password"
POSTGRES_DATABASE="database"

# NextJS
NEXTAUTH_URL="https://your-domain.vercel.app"
NEXTAUTH_SECRET="your-secret-key"

# Admin Access
ADMIN_USERNAME="admin"
ADMIN_PASSWORD="secure-password"
*/

// next.config.js - Next.js 配置
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  experimental: {
    serverComponentsExternalPackages: ['@vercel/postgres']
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
  // 允許 YouTube iframe
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN'
          },
          {
            key: 'Content-Security-Policy',
            value: "frame-src 'self' https://www.youtube.com https://youtube.com"
          }
        ]
      }
    ]
  },
  // 重定向配置
  async redirects() {
    return [
      {
        source: '/admin',
        destination: '/admin/dashboard',
        permanent: true,
      },
    ]
  }
}

module.exports = nextConfig

// tailwind.config.js - Tailwind CSS 配置
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
        success: {
          50: '#f0fdf4',
          500: '#22c55e',
          600: '#16a34a',
        },
        warning: {
          50: '#fffbeb',
          500: '#f59e0b',
          600: '#d97706',
        },
        danger: {
          50: '#fef2f2',
          500: '#ef4444',
          600: '#dc2626',
        }
      },
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui'],
        mono: ['Fira Code', 'ui-monospace', 'SFMono-Regular'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'pulse-slow': 'pulse 3s ease-in-out infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        }
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
}

// postcss.config.js - PostCSS 配置
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

// pages/_app.tsx - App 配置
import type { AppProps } from 'next/app'
import { useEffect } from 'react'
import '../styles/globals.css'

// 全域錯誤處理
function handleGlobalError(error: Error) {
  console.error('Global error:', error)
  // 可以發送到錯誤追蹤服務
}

export default function App({ Component, pageProps }: AppProps) {
  useEffect(() => {
    // 全域錯誤處理
    window.addEventListener('error', (event) => {
      handleGlobalError(event.error)
    })

    window.addEventListener('unhandledrejection', (event) => {
      handleGlobalError(new Error(event.reason))
    })

    // 預防作弊：禁用右鍵選單和開發者工具快捷鍵
    const preventContextMenu = (e: MouseEvent) => e.preventDefault()
    const preventDevTools = (e: KeyboardEvent) => {
      // 禁用 F12, Ctrl+Shift+I, Ctrl+U 等
      if (
        e.key === 'F12' ||
        (e.ctrlKey && e.shiftKey && e.key === 'I') ||
        (e.ctrlKey && e.key === 'u')
      ) {
        e.preventDefault()
        alert('為了維護考試公平性，此功能已被停用')
      }
    }

    document.addEventListener('contextmenu', preventContextMenu)
    document.addEventListener('keydown', preventDevTools)

    return () => {
      document.removeEventListener('contextmenu', preventContextMenu)
      document.removeEventListener('keydown', preventDevTools)
    }
  }, [])

  return <Component {...pageProps} />
}

// pages/_document.tsx - Document 配置
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="zh-TW">
      <Head>
        <meta charSet="utf-8" />
        <meta name="description" content="健行科技大學戒菸教育系統" />
        <meta name="keywords" content="戒菸,教育,健行科技大學,菸害防制" />
        <meta name="author" content="健行科技大學軍訓室" />
        <link rel="icon" href="/favicon.ico" />
        
        {/* 預載入重要資源 */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://www.youtube.com" />
        
        {/* SEO 和社群媒體 meta tags */}
        <meta property="og:title" content="健行科技大學戒菸教育系統" />
        <meta property="og:description" content="線上戒菸教育學習平台" />
        <meta property="og:type" content="website" />
        
        {/* 防止縮放 */}
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
      </Head>
      <body className="antialiased">
        <Main />
        <NextScript />
        
        {/* 載入統計腳本 */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // 防作弊監控
              let violations = 0;
              let startTime = Date.now();
              
              // 監控視窗焦點
              window.addEventListener('blur', function() {
                violations++;
                console.log('視窗失去焦點，違規次數：', violations);
              });
              
              // 監控視窗大小
              window.addEventListener('resize', function() {
                if (window.innerWidth < 800 || window.innerHeight < 600) {
                  violations++;
                  console.log('視窗過小，違規次數：', violations);
                }
              });
              
              // 頁面離開前警告
              window.addEventListener('beforeunload', function(e) {
                if (violations > 0) {
                  const message = '您有違規操作記錄，確定要離開嗎？';
                  e.returnValue = message;
                  return message;
                }
              });
            `
          }}
        />
      </body>
    </Html>
  )
}

// middleware.ts - 中間件配置
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // 管理員路由保護
  if (request.nextUrl.pathname.startsWith('/admin')) {
    const authHeader = request.headers.get('authorization')
    
    if (!authHeader) {
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }
  }

  // 安全標頭
  const response = NextResponse.next()
  
  response.headers.set('X-Frame-Options', 'SAMEORIGIN')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  return response
}

export const config = {
  matcher: [
    '/admin/:path*',
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}

// 部署腳本 - deploy.sh
#!/bin/bash

echo "開始部署戒菸教育系統..."

# 檢查環境變數
if [ -z "$POSTGRES_URL" ]; then
    echo "錯誤：請設定 POSTGRES_URL 環境變數"
    exit 1
fi

# 安裝依賴
echo "安裝依賴套件..."
npm install

# 建置專案
echo "建置專案..."
npm run build

# 執行資料庫初始化
echo "初始化資料庫..."
npm run db:init

# 部署到 Vercel
echo "部署到 Vercel..."
vercel --prod

echo "部署完成！"

# package.json scripts 更新
/*
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:init": "node scripts/init-db.js",
    "db:seed": "node scripts/seed-db.js",
    "deploy": "bash deploy.sh"
  }
}
*/

// scripts/init-db.js - 資料庫初始化腳本
const { sql } = require('@vercel/postgres');

async function initDatabase() {
  try {
    console.log('正在初始化資料庫...');
    
    // 執行建表 SQL
    await sql`
      CREATE TABLE IF NOT EXISTS students_info (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        class VARCHAR(50) NOT NULL,
        student_id VARCHAR(20) UNIQUE NOT NULL,
        phone VARCHAR(20) NOT NULL,
        instructor VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;
    
    // 其他表的建立...
    
    console.log('資料庫初始化完成！');
  } catch (error) {
    console.error('資料庫初始化失敗：', error);
    process.exit(1);
  }
}

if (require.main === module) {
  initDatabase();
}

module.exports = { initDatabase };

// 使用說明 README.md
/*
# 健行科技大學戒菸教育系統

## 功能特色
- 完整的戒菸教育流程
- 防作弊監控機制
- 即時進度追蹤
- 統計分析後台
- PDF 記錄生成

## 技術架構
- Frontend: Next.js + React + TypeScript
- Backend: Next.js API Routes
- Database: PostgreSQL (Vercel Postgres)
- Styling: Tailwind CSS
- Charts: Recharts
- PDF: jsPDF

## 安裝步驟

1. 克隆專案
git clone [repo-url]
cd smoking-cessation-education

2. 安裝依賴
npm install

3. 設定環境變數
cp .env.example .env.local
# 編輯 .env.local 填入資料庫連線資訊

4. 初始化資料庫
npm run db:init

5. 啟動開發伺服器
npm run dev

## 部署到 Vercel

1. 連接 GitHub 儲存庫到 Vercel
2. 設定環境變數
3. 部署完成後執行資料庫初始化

## 系統架構

```
├── pages/
│   ├── api/               # API 路由
│   │   ├── students/      # 學生資料管理
│   │   ├── survey/        # 吸菸調查
│   │   ├── videos/        # 影片進度
│   │   ├── quiz/          # 測驗系統
│   │   ├── admin/         # 後台管理
│   │   └── export/        # 資料匯出
│   ├── admin/             # 後台管理頁面
│   └── index.tsx          # 主要應用程式
├── components/            # React 組件
├── lib/                   # 工具函數
├── styles/                # 樣式文件
└── public/                # 靜態資源
```

## 防作弊機制

1. **視窗監控**
   - 檢測視窗焦點狀態
   - 監控視窗大小變化
   - 頁面可見性檢測

2. **時間追蹤**
   - 只有在專心狀態下才計時
   - 記錄違規次數和時間
   - 專注度百分比計算

3. **進度保護**
   - 防止跳過影片
   - 測驗答案驗證
   - 完成度檢查

## 使用流程

### 學生端
1. 填寫個人資料和吸菸調查
2. 觀看四部戒菸宣導影片
3. 完成 20 題戒菸常識測驗
4. 撰寫 500 字心得報告
5. 選擇宣導活動場次
6. 列印完成記錄表

### 管理端
1. 查看學生執行記錄
2. 統計分析吸菸調查結果
3. 匯出 Excel 報表
4. 監控系統使用狀況

## API 端點

- `POST /api/students` - 建立學生記錄
- `POST /api/survey` - 提交吸菸調查
- `POST /api/videos/progress` - 更新影片進度
- `POST /api/quiz/submit` - 提交測驗答案
- `POST /api/event/select` - 選擇宣導場次
- `GET /api/admin/statistics` - 獲取統計資料
- `GET /api/admin/export` - 匯出資料

## 資料庫結構

主要資料表：
- `students_info` - 學生基本資料
- `smoking_survey` - 吸菸調查結果
- `video_records` - 影片觀看記錄
- `quiz_results` - 測驗結果
- `completion_records` - 完成度追蹤
- `event_selection` - 場次選擇

## 安全性

1. **輸入驗證** - 所有使用者輸入都經過驗證
2. **SQL 注入防護** - 使用參數化查詢
3. **CSRF 防護** - 實作 CSRF token
4. **存取控制** - 管理員路由保護
5. **資料加密** - 敏感資料加密存儲

## 效能優化

1. **圖片優化** - Next.js 自動圖片優化
2. **程式碼分割** - 動態載入非關鍵組件
3. **快取策略** - API 回應快取
4. **CDN 加速** - 靜態資源 CDN 分發

## 監控與維護

1. **錯誤追蹤** - 整合錯誤監控服務
2. **效能監控** - 監控 API 回應時間
3. **使用者分析** - 追蹤使用者行為
4. **備份策略** - 定期資料庫備份

## 常見問題

**Q: 學生可以重複進入系統嗎？**
A: 系統會檢查學號，已完成的學生無法重複執行。

**Q: 影片無法播放怎麼辦？**
A: 請確認網路連線，或聯絡技術支援。

**Q: 如何重置學生進度？**
A: 管理員可在後台重置特定學生的進度。

**Q: 資料可以匯出嗎？**
A: 可以，管理員可匯出 Excel 格式的完整記錄。

## 技術支援

如有任何技術問題，請聯絡：
- 電話：03-4581196
- 信箱：military@uch.edu.tw
- 地址：桃園市中壢區健行路229號

## 更新日誌

### v1.0.0 (2024-03-15)
- 初始版本發布
- 完整戒菸教育流程
- 防作弊監控機制
- 後台管理系統

### 未來規劃
- 手機 App 版本
- 多語言支援
- 進階統計分析
- 自動提醒功能
*/ 
